{"version":3,"sources":["App.js","index.js"],"names":["symbols","initTable","Array","fill","NaN","initSymbol","classNames","getNextSymbol","currentSymbol","getWinCombination","winSets","table","find","cells","getWinCombinationWinSet","class","App","useState","setTable","symbol","setSymbol","winSet","setWinSet","isGameOver","setIsGameOver","handleClick","useCallback","i","index","item","getIsBusyCell","array","slice","restartGame","useEffect","winCombination","isTie","every","cell","getIsTie","className","map","key","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAGMA,G,MACD,KADCA,EAED,IAECC,EAAYC,MAAM,GAAGC,KAAKC,KAC1BC,EAAaL,EAEbM,GAAU,mBACbN,EAAY,cADC,cAEbA,EAAY,eAFC,GAiBVO,EAAgB,SAAAC,GAAa,OAAIA,IAAkBR,EAAYA,EAAYA,GAS3ES,EAL0B,SAACC,GAAD,OAAa,SAACC,GAAD,OAC3CD,EAAQE,MAAK,gBAAGC,EAAH,EAAGA,MAAH,OAAeF,EAAME,EAAM,MAAQF,EAAME,EAAM,KAAOF,EAAME,EAAM,MAAQF,EAAME,EAAM,QAI3EC,CArBV,CACd,CAAED,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,qBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,qBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,qBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,uBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,sBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,wBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,sBAC3B,CAAEF,MAAO,CAAC,EAAG,EAAG,GAAIE,MAAO,wBAmEdC,MAlDf,WAAgB,IAAD,EACaC,mBAAShB,GADtB,mBACNU,EADM,KACCO,EADD,OAEeD,mBAASZ,GAFxB,mBAENc,EAFM,KAEEC,EAFF,OAGeH,mBAAS,MAHxB,mBAGNI,EAHM,KAGEC,EAHF,OAIuBL,oBAAS,GAJhC,mBAINM,EAJM,KAIMC,EAJN,KAMPC,EAAcC,uBAAY,SAACC,GAAD,OAAO,WACrC,IAlBSC,EAAOC,GASE,SAACF,EAAGhB,GAAJ,QAAgBA,EAAMgB,IASrBG,CAAcH,EAAGhB,IAClBY,IAClBL,GApBSU,EAoBID,EApBGE,EAoBAV,EApBS,SAAAY,GAAK,4BAAQA,EAAMC,MAAM,EAAGJ,IAAvB,CAA+BC,GAA/B,YAAwCE,EAAMC,MAAMJ,EAAQ,QAqB1FR,EAAUb,OACT,CAACY,EAAQR,EAAOY,IAEbU,EAAcP,uBAAY,WAC9BR,EAASjB,GACTmB,EAAUf,GACViB,EAAU,MACVE,GAAc,KACb,IAaH,OAXAU,qBAAU,WACR,IAAMC,EAAiB1B,EAAkBE,GACnCyB,EA5BO,SAAAzB,GAAK,OAAIA,EAAM0B,OAAM,SAAAC,GAAI,QAAMA,KA4B9BC,CAAS5B,IACnBwB,GAAkBC,IACpBZ,GAAc,GAEZW,GACFb,EAAUa,KAEX,CAACxB,IAGF,yBAAK6B,UAAU,OACb,yBAAKA,UAAU,iBACZ7B,EAAM8B,KAAI,SAACZ,EAAMF,GAChB,OACE,yBAAKa,UAAU,eAAeE,IAAKf,EAAGgB,QAASlB,EAAYE,IACzD,yBAAKa,UAAS,eAAUlC,EAAWuB,UAIzC,yBAAKW,UAAS,mBAAcnB,GAAM,0BAAuBA,EAAON,WAElE,yBAAKyB,UAAS,yBAAoBjB,GAAc,yBAA2BoB,QAASV,GAApF,aC9ENW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.038b4163.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport './App.css';\n\nconst symbols = {\n  x: 'X',\n  o: '0',\n};\nconst initTable = Array(9).fill(NaN);\nconst initSymbol = symbols.x;\n\nconst classNames = {\n  [symbols.x]: 'cell-cross',\n  [symbols.o]: 'cell-nought',\n};\n\nconst winSets = [\n  { cells: [0, 1, 2], class: 'win-line--hor-top'},\n  { cells: [3, 4, 5], class: 'win-line--hor-mid'},\n  { cells: [6, 7, 8], class: 'win-line--hor-low'},\n  { cells: [0, 3, 6], class: 'win-line--vert-left'},\n  { cells: [1, 4, 7], class: 'win-line--vert-mid'},\n  { cells: [2, 5, 8], class: 'win-line--vert-right'},\n  { cells: [0, 4, 8], class: 'win-line--diag-neg'},\n  { cells: [2, 4, 6], class: 'win-line--diag-pos'},\n];\n\n\nconst getNextSymbol = currentSymbol => currentSymbol === symbols.x ? symbols.o : symbols.x;\n\nconst set = (index, item) => array => [...array.slice(0, index), item, ...array.slice(index + 1)];\n\nconst getWinCombinationWinSet = (winSets) => (table) =>\n  winSets.find(({ cells }) => table[cells[0]] === table[cells[1]] && table[cells[1]] === table[cells[2]]);\n\nconst getIsTie = table => table.every(cell => !!cell);\n\nconst getWinCombination = getWinCombinationWinSet(winSets);\n\nconst getIsBusyCell = (i, table) => !!table[i];\n\nfunction App() {\n  const [table, setTable] = useState(initTable);\n  const [symbol, setSymbol] = useState(initSymbol);\n  const [winSet, setWinSet] = useState(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleClick = useCallback((i) => () => {\n    const isCellBusy = getIsBusyCell(i, table);\n    if (isCellBusy || isGameOver) return;\n    setTable(set(i, symbol));\n    setSymbol(getNextSymbol);\n  }, [symbol, table, isGameOver]);\n\n  const restartGame = useCallback(() => {\n    setTable(initTable);\n    setSymbol(initSymbol);\n    setWinSet(null);\n    setIsGameOver(false);\n  }, []);\n\n  useEffect(() => {\n    const winCombination = getWinCombination(table);\n    const isTie = getIsTie(table);\n    if (winCombination || isTie) {\n      setIsGameOver(true);\n    }\n    if (winCombination) {\n      setWinSet(winCombination)\n    }\n  }, [table]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"table-wrapper\">\n        {table.map((item, i) => {\n          return (\n            <div className=\"cell-wrapper\" key={i} onClick={handleClick(i)}>\n              <div className={`cell ${classNames[item]}`}></div>\n            </div>\n          )\n        })}\n        <div className={`win-line ${winSet && `win-line--shown ${winSet.class}`}`}/>\n      </div>\n      <div className={`restart-button ${isGameOver && 'restart-button--shown'}`} onClick={restartGame}>\n          RESTART\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}